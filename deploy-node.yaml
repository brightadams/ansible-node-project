---
- name: Install node and npm
  hosts: 206.189.20.204
  tasks:
    #we update the apt package first
    - name: Update apt package
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    - name: Install nodejs and npm
      #so since we have more than one package to install we do it this way
      apt:
        pkg:
          - nodejs
          - npm

#create a non-root user
- name: Create new linux user for node app
  hosts: 206.189.20.204
  vars_files:
    - project-vars
  tasks:
    - name: Create linux user
      user:
        name: "{{linux_name}}"
        comment: Bright Admin
        group: admin
      register: user_creation
    - debug: msg={{user_creation}}

- name: Deploy nodejs app
  hosts: 206.189.20.204
  become: True
  become_user: "{{linux_name}}"
  vars:
    # - location: /Users/brightadams/Desktop/projects/devops/devops_bootcamp_nana/simple-nodejs
    # - version: 1.0.0
    - destination: "/home/{{linux_name}}"
  vars_files:
    - project-vars
  tasks:
    # since we can untar from local to remote we do not need to copy
    # #so here we want to copy the tar file to server
    # - name: Copy nodejs folder to server
    #   copy:
    #     src: /Users/brightadams/Desktop/projects/devops/devops_bootcamp_nana/simple-nodejs/nodejs-app-1.0.0.tgz
    #     dest: /root/app-1.0.0.tgz
    #we unpack the zip file
    - name: Unpack the node tar
      unarchive:
        src: "{{location}}/nodejs-app-{{version}}.tgz"
        dest: "{{destination}}"
        # so we do the below to tell ansible that the file is on remote server, we donot do that ansible will look at our local files
        #remote_src: yes
    - name: Install dependencies
      #use npm to install dependencies, just the path to where the package.json file is
      npm:
        path: "{{destination}}/package"
    - name: Start the application
      # so we want to do; node server.js ; and since there no module to do that , we use command module which already passes commands on the server
      command:
        chdir: /home/bright/package/app
        cmd: node server
      # the command above will block terminal and no command can be run again, so we do the below to be able to put it in the background
      async: 1000
      poll: 0
    - name: Ensure app is running
      shell: ps aux | grep node
      #we do not see the output of the above cmd so we store it in a variable
      register: app_status
      #then we display the variable using the debug module
    - debug: msg={{app_status.stdout}}
